package _01_object;

public class T01_api_class {

	
		//클래스 :
		/*		1 main 클래스 : main메소드가 들어있음. 실행용
		  		2 라이브러리 클래스 : main메소드 없음. 다른 클래스에서 보조로 사용할 목적. 단독으로는 사용할수 없고 객체 생성해야 사용가능
			
			
				3 클래스 구성요소
					- 필드(변수) : 저장공간 ex) 크기, 길이, 색, 볼륨
					
					- 메소드(기능): 입력값을 받아서(입력값 없을수도 있음) 프로그램 실행 ex) 불을 끄다, 불을키다, 크기를 키우다, 볼륨을 줄이다
								 작업을 수행하기 위한 명령문의 집합
		*/	
		/*예를들어 Abc 라는 클래스가 있다 가정하면 클래스를 가져오는법은
		 	Abc 변수이름 = new Abc();    //객체로 불러옴 객체=인스턴스
		*/
	//---------------------------------
		//	속성 == 필드 == 변수,상수
			int num = 10;
			String name = "김요한";
			double dou = 3.14;
			boolean bool = true;
		
			
		/*
			메서드란?
			-작업을 수행하기 위한 명령문의 집합
			-어떤 값을 입력받아서 처리하고 그 결과를 돌려준다
			(입력받느 값이 없을 수도 있고 결과를 돌려주지 않을 수도 있다.
			
			메서드의 장점과 작성지침
			-반복적인 코드를 줄이고 코드의 관리가 용이하다
			-반복적으로 수행되는 여러 문장을 메서드로 작성한다.
			-하나의 메서드는 한 가지 기능만 수행하도록 작성하는 것이 좋다.
			-관련된 여러 분장을 메서드로 작성한다.
			
			메소드를 정의하는 방법 - 클래스 영역에만 정의할 수 있음
			
			
			리턴타입 메소드이름 (타입 변수명, 타입 변수명, ...)  - 선언부
			{
				
				메소드 호출시 수행될 코드					- 구현부
				
			 }
		
			
			int add(int a, int b)					- 선언부  // 리턴값이 있는경우 변수앞에 리턴받을 자료형 붙이기
			{
			
			 	int result = a + b;
			 	return result;	//호출한 메소드로 결과를 반환한다  - 구현부
			
			}
		
			void power() {   	//반환값이 없는 경우 리턴타입 대신 void를 사용한다.
			 	power = !power;
		
		
		*/
		
	

}
